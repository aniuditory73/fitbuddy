# handlers.py

from aiogram import Router, types, F, Bot # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Bot –Ω–∞–ø—Ä—è–º—É—é –∏–∑ aiogram
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç InlineKeyboardBuilder
from aiogram.types import FSInputFile, InputMediaPhoto, InlineKeyboardButton # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø, InlineKeyboardButton
from aiogram.enums import ParseMode # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç ParseMode
from sqlalchemy.orm import Session
from sqlalchemy import func
from datetime import datetime, timedelta
import os
from aiogram.fsm.state import State # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç State

from database import Meal, Workout, Weight, Reminder, User, get_db, Exercise, Friendship # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Friendship
from database import FavoriteFood # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª—é–±–∏–º—ã—Ö –±–ª—é–¥
from utils import RegistrationStates, FoodStates, WorkoutStates, WeightStates, ReminderStates, CalorieTargetStates, generate_weight_chart, parse_food_input, get_calories_per_100g, get_main_keyboard, search_open_food_facts, register_activity, get_food_menu_keyboard, get_workout_menu_keyboard, get_weight_menu_keyboard, get_rating_menu_keyboard, get_back_keyboard, get_cancel_keyboard, get_leaderboard_keyboard, get_friend_menu_keyboard, get_add_friend_keyboard, get_friend_requests_keyboard # –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥—Ä—É–∑–µ–π
from utils import FavoriteFoodStates, get_favorite_food_keyboard, add_favorite_food, remove_favorite_food # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª—é–±–∏–º—ã—Ö –±–ª—é–¥
from utils import get_workout_history_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BODY_PART_TRANSLATIONS
from utils import ExerciseLibraryStates, LeaderboardStates, FriendStates # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, LeaderboardStates –∏ FriendStates
from utils import add_state_to_history, get_previous_state, clear_state_history, UserStateHistory, update_calorie_streak, notify_friends_about_achievement # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ UserStateHistory, update_calorie_streak, notify_friends_about_achievement
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import json # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON-—Å—Ç—Ä–æ–∫–∞–º–∏
from config import ADMIN_ID # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_ID
from utils import AdminStates # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AdminStates
import logging

router = Router()

logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    db = next(get_db())
    user_id = message.from_user.id
    user = db.query(User).filter(User.telegram_id == user_id).first()

    bot_description = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π FitBuddy ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Ñ–∏—Ç–Ω–µ—Å—É.\n\n"
        "–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "‚Ä¢   <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ:</b> –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è–π —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É. –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏–ª–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –µ–µ –≤—Ä—É—á–Ω—É—é. –°–æ—Ö—Ä–∞–Ω—è–π –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!\n"
        "‚Ä¢   <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b> –ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —É–∫–∞–∑—ã–≤–∞—è –¥–µ—Ç–∞–ª–∏, –∏ —Å–ª–µ–¥–∏ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π —Å–≤–æ–∏—Ö –∑–∞–Ω—è—Ç–∏–π.\n"
        "‚Ä¢   <b>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å:</b> –í–Ω–æ—Å–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–µ–º –≤–µ—Å–µ, –∏ —è –ø–æ—Å—Ç—Ä–æ—é –Ω–∞–≥–ª—è–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
        "‚Ä¢   <b>–ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n"
        "‚Ä¢   <b>–°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:</b> –ü–æ–ª—É—á–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ç–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
    )

    if user:
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_main_keyboard())
    else:
        await message.answer(bot_description, parse_mode="HTML")
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=get_cancel_keyboard())
        await state.set_state(RegistrationStates.waiting_for_age)
        await add_state_to_history(state, RegistrationStates.waiting_for_age.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º first_name –∏ username –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(first_name=message.from_user.first_name, username=message.from_user.username)
    db.close()

@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if not (5 < age < 120):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 5 –¥–æ 120 –ª–µ—Ç).", reply_markup=get_cancel_keyboard())
            return
        await state.update_data(age=age)
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?", reply_markup=get_cancel_keyboard())
        await state.set_state(RegistrationStates.waiting_for_height)
        await add_state_to_history(state, RegistrationStates.waiting_for_height.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())

@router.message(RegistrationStates.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        if not (50 < height < 250):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 50 –¥–æ 250).", reply_markup=get_cancel_keyboard())
            return
        await state.update_data(height=height)
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?", reply_markup=get_cancel_keyboard())
        await state.set_state(RegistrationStates.waiting_for_weight)
        await add_state_to_history(state, RegistrationStates.waiting_for_weight.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())

@router.message(RegistrationStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if not (20 < weight < 300):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 20 –¥–æ 300).", reply_markup=get_cancel_keyboard())
            return
        await state.update_data(weight=weight)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ü–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="goal_–ø–æ—Ö—É–¥–µ—Ç—å")],
                [types.InlineKeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="goal_–Ω–∞–±—Ä–∞—Ç—å_–º–∞—Å—Å—É")],
                [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å", callback_data="goal_–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å")],
                [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")] # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            ]
        )
        await message.answer("–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è —Ü–µ–ª—å?", reply_markup=keyboard)
        await state.set_state(RegistrationStates.waiting_for_goal)
        await add_state_to_history(state, RegistrationStates.waiting_for_goal.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ —Ü–µ–ª–∏
@router.callback_query(F.data.startswith("goal_"), RegistrationStates.waiting_for_goal)
async def process_goal_callback(callback_query: types.CallbackQuery, state: FSMContext):
    goal = callback_query.data.split("_")[1]
    await state.update_data(goal=goal)

    user_data = await state.get_data()
    user_id = callback_query.from_user.id
    db = next(get_db())

    new_user = User(
        telegram_id=user_id,
        first_name=user_data.get('first_name'), # –ü–æ–ª—É—á–∞–µ–º first_name –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        username=user_data.get('username'), # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        age=user_data['age'],
        height=user_data['height'],
        weight=user_data['weight'],
        goal=goal,
        calorie_target=None # –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    db.close()

    await callback_query.message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000).")
    await state.set_state(RegistrationStates.waiting_for_calorie_target_on_registration)
    await add_state_to_history(state, RegistrationStates.waiting_for_calorie_target_on_registration.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

@router.message(RegistrationStates.waiting_for_goal) # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def process_goal_text_fallback(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=get_main_keyboard())

@router.message(RegistrationStates.waiting_for_calorie_target_on_registration)
async def process_calorie_target_on_registration(message: types.Message, state: FSMContext):
    db = next(get_db())
    try:
        calorie_target = int(message.text)
        if calorie_target <= 0:
            await message.answer("‚ö†Ô∏è –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_main_keyboard())
            return
        
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.calorie_target = calorie_target
            db.commit()
            db.refresh(user)
            await message.answer(f"‚úÖ –¢–≤–æ—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {calorie_target} –∫–∫–∞–ª. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.", reply_markup=get_main_keyboard())

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —á–∏—Å–ª–æ–º.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}", reply_markup=get_main_keyboard())
    finally:
        db.close()
        await state.clear()
        await clear_state_history(state)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞", State("*")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@router.callback_query(F.data == "cancel_registration", State("*")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
async def cmd_cancel(callback_or_message: types.CallbackQuery | types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        if isinstance(callback_or_message, types.CallbackQuery):
            await callback_or_message.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=None)
            await callback_or_message.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
            await callback_or_message.answer()
        else:
            await callback_or_message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=get_main_keyboard())
        return
    
    await state.clear()
    await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    if isinstance(callback_or_message, types.CallbackQuery):
        await callback_or_message.message.edit_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await callback_or_message.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        await callback_or_message.answer()
    else:
        await callback_or_message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile_button(message: types.Message):
    await cmd_profile(message)

@router.message(F.text == "–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å")
async def handle_today_button(message: types.Message, state: FSMContext):
    await cmd_today(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–ï–¥–∞")
async def handle_food_menu(message: types.Message, state: FSMContext):
    await message.answer("üçé –ú–µ–Ω—é –µ–¥—ã:", reply_markup=get_food_menu_keyboard())
    await add_state_to_history(state, FoodStates.waiting_for_food_name.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FoodStates

@router.message(F.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def handle_workout_menu(message: types.Message, state: FSMContext):
    await message.answer("üí™ –ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", reply_markup=get_workout_menu_keyboard())
    await add_state_to_history(state, WorkoutStates.waiting_for_workout_name.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è WorkoutStates

@router.message(F.text == "–í–µ—Å")
async def handle_weight_menu(message: types.Message, state: FSMContext):
    await message.answer("‚öñÔ∏è –ú–µ–Ω—é –≤–µ—Å–∞:", reply_markup=get_weight_menu_keyboard())
    await add_state_to_history(state, WeightStates.waiting_for_new_weight.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è WeightStates

@router.message(F.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def handle_reminder_button(message: types.Message, state: FSMContext):
    await cmd_reminder(message, state)

@router.message(F.text == "–†–µ–π—Ç–∏–Ω–≥")
async def handle_rating_menu(message: types.Message, state: FSMContext):
    await message.answer("üåü –ú–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞:", reply_markup=get_rating_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞

@router.message(F.text == "–î—Ä—É–∑—å—è")
async def handle_friends_menu_button(message: types.Message, state: FSMContext):
    await message.answer("üë• –ú–µ–Ω—é –¥—Ä—É–∑–µ–π:", reply_markup=get_friend_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –¥—Ä—É–∑–µ–π

@router.message(F.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
async def handle_leaderboard_menu(message: types.Message, state: FSMContext):
    await message.answer("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:", reply_markup=get_leaderboard_keyboard())
    await state.set_state(LeaderboardStates.waiting_for_leaderboard_type)
    await add_state_to_history(state, LeaderboardStates.waiting_for_leaderboard_type.state)

@router.message(F.text == "–ù–∞–∑–∞–¥")
@router.message(F.text == "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")
async def handle_back_to_main_menu(message: types.Message, state: FSMContext):
    print(f"DEBUG (handle_back_to_main_menu): Message text: {message.text}")
    previous_state_name = await get_previous_state(state) # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    print(f"DEBUG (handle_back_to_main_menu): Previous state from history: {previous_state_name}")

    if previous_state_name:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å—Ö–æ–¥—è –∏–∑ previous_state_name
        if "WorkoutStates" in previous_state_name or "ExerciseLibraryStates" in previous_state_name:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=get_workout_menu_keyboard())
            await state.set_state(WorkoutStates.waiting_for_workout_name) 
        elif "FoodStates" in previous_state_name or "FavoriteFoodStates" in previous_state_name:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –µ–¥—ã.", reply_markup=get_food_menu_keyboard())
            await state.set_state(FoodStates.waiting_for_food_name) 
        elif "WeightStates" in previous_state_name:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤–µ—Å–∞.", reply_markup=get_weight_menu_keyboard())
            await state.set_state(WeightStates.waiting_for_new_weight) 
        elif "ReminderStates" in previous_state_name:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard()) 
            await state.clear()
            await clear_state_history(state)
        elif "LeaderboardStates" in previous_state_name:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞.", reply_markup=get_rating_menu_keyboard())
            await state.clear()
            await clear_state_history(state)
        elif "FriendStates" in previous_state_name: # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –º–µ–Ω—é –¥—Ä—É–∑–µ–π
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞.", reply_markup=get_rating_menu_keyboard())
            await state.clear()
            await clear_state_history(state)
        elif "UserStateHistory" in previous_state_name: # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–µ –æ–±—â–µ–µ –º–µ–Ω—é
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await clear_state_history(state)
        else:
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state)
    else:
        print("DEBUG (handle_back_to_main_menu): –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        await state.clear()
        await clear_state_history(state)

@router.message(F.text == "–õ—é–±–∏–º—ã–µ –±–ª—é–¥–∞")
async def handle_favorite_foods_menu(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        db.close()
        return
    favorite_foods = db.query(FavoriteFood).filter(FavoriteFood.user_id == user.id).all()
    db.close()

    if favorite_foods:
        await message.answer("‚ù§Ô∏è –¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞:", reply_markup=get_favorite_food_keyboard(favorite_foods))
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.row(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ", callback_data="add_favorite_food"))
        keyboard.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_food_menu"))
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –±–ª—é–¥. –î–æ–±–∞–≤—å –ø–µ—Ä–≤–æ–µ!", reply_markup=keyboard.as_markup())

@router.callback_query(F.data == "back_to_food_menu")
async def handle_back_to_food_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –µ–¥—ã.", reply_markup=None)
    await callback_query.message.answer("–ú–µ–Ω—é –µ–¥—ã:", reply_markup=get_food_menu_keyboard())
    await callback_query.answer()

@router.callback_query(F.data == "add_favorite_food")
async def handle_add_favorite_food_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ûï –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–∏–º–æ–≥–æ –±–ª—é–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û–≤—Å—è–Ω–∫–∞'):")
    await state.set_state(FavoriteFoodStates.waiting_for_favorite_food_name)
    await add_state_to_history(state, FavoriteFoodStates.waiting_for_favorite_food_name.state)
    await callback_query.answer()

@router.message(FavoriteFoodStates.waiting_for_favorite_food_name)
async def process_favorite_food_name(message: types.Message, state: FSMContext):
    favorite_food_name = message.text.strip()
    if not favorite_food_name:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.", reply_markup=get_food_menu_keyboard())
        return
    await state.update_data(favorite_food_name=favorite_food_name)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100–≥ –≤ —ç—Ç–æ–º –±–ª—é–¥–µ? (–ù–∞–ø—Ä–∏–º–µ—Ä, 150)")
    await state.set_state(FavoriteFoodStates.waiting_for_favorite_food_calories)
    await add_state_to_history(state, FavoriteFoodStates.waiting_for_favorite_food_calories.state)
    await callback_query.answer()

@router.message(FavoriteFoodStates.waiting_for_favorite_food_calories)
async def process_favorite_food_calories(message: types.Message, state: FSMContext):
    db = next(get_db())
    try:
        calories_per_100g = int(message.text)
        if calories_per_100g <= 0:
            await message.answer("‚ö†Ô∏è –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
            return
        user_data = await state.get_data()
        user_id = db.query(User).filter(User.telegram_id == message.from_user.id).first().id
        
        new_favorite = await add_favorite_food(db, user_id, user_data['favorite_food_name'], calories_per_100g)
        db.close()
        await message.answer(f"‚úÖ –õ—é–±–∏–º–æ–µ –±–ª—é–¥–æ '{new_favorite.name}' ({new_favorite.calories_per_100g} –∫–∫–∞–ª/100–≥) –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_food_menu_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–∞–ª–æ—Ä–∏–∏ —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
        db.close()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª—é–±–∏–º–æ–≥–æ –±–ª—é–¥–∞: {e}", reply_markup=get_food_menu_keyboard())
        db.close()
        await state.clear()
        await clear_state_history(state)

@router.callback_query(F.data == "remove_favorite_food_start")
async def handle_remove_favorite_food_start(callback_query: types.CallbackQuery):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == callback_query.from_user.id).first()
    if not user:
        await callback_query.message.edit_text("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=None)
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –µ–¥—ã.", reply_markup=get_food_menu_keyboard())
        db.close()
        await callback_query.answer()
        return
    favorite_foods = db.query(FavoriteFood).filter(FavoriteFood.user_id == user.id).all()
    db.close()

    if favorite_foods:
        builder = InlineKeyboardBuilder()
        for food in favorite_foods:
            builder.button(text=f"‚ùå {food.name}", callback_data=f"delete_favorite_food_{food.id}")
        builder.row(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_food_menu"))
        await callback_query.message.edit_text("üóëÔ∏è –í—ã–±–µ—Ä–∏ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    else:
        await callback_query.message.edit_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö –±–ª—é–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=None)
        await callback_query.message.answer("–ú–µ–Ω—é –µ–¥—ã:", reply_markup=get_food_menu_keyboard())
    await callback_query.answer()

@router.callback_query(F.data.startswith("delete_favorite_food_"))
async def handle_delete_favorite_food(callback_query: types.CallbackQuery):
    db = next(get_db())
    favorite_food_id = int(callback_query.data.split("_")[3])
    await remove_favorite_food(db, favorite_food_id)
    db.close()
    await callback_query.answer("‚úÖ –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –±–ª—é–¥ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await handle_favorite_foods_menu(callback_query.message) # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –ª—é–±–∏–º—ã—Ö –±–ª—é–¥

@router.callback_query(F.data.startswith("select_favorite_food_"))
async def handle_select_favorite_food(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    db = next(get_db())
    favorite_food_id = int(callback_query.data.split("_")[3])
    selected_favorite_food = db.query(FavoriteFood).filter(FavoriteFood.id == favorite_food_id).first()
    db.close()

    if selected_favorite_food:
        await state.update_data(selected_food={
            'food_name': selected_favorite_food.name,
            'calories_per_100g': selected_favorite_food.calories_per_100g
        })
        await callback_query.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω: '{selected_favorite_food.name}' ({selected_favorite_food.calories_per_100g} –∫–∫–∞–ª/100–≥). –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ç—ã —Å—ä–µ–ª?", reply_markup=None)
        await state.set_state(FoodStates.waiting_for_calories_quantity)
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ.", reply_markup=get_food_menu_keyboard())
        await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É")
async def handle_add_food_button(message: types.Message, state: FSMContext):
    await cmd_food(message, state)

@router.message(F.text == "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def handle_log_workout_button(message: types.Message, state: FSMContext):
    await cmd_workout(message, state)

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –≤–µ—Å")
async def handle_enter_weight_button(message: types.Message, state: FSMContext):
    await cmd_weight(message, state)

@router.message(F.text == "–ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞")
async def handle_weight_chart_button(message: types.Message, state: FSMContext):
    await cmd_weight_chart(message, state)

@router.message(F.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def handle_reminder_button(message: types.Message, state: FSMContext):
    await cmd_reminder(message, state)

@router.message(F.text == "–û—á–∫–∏")
async def handle_points_button(message: types.Message, state: FSMContext):
    await cmd_points(message, state)

@router.message(F.text == "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def handle_achievements_button(message: types.Message, state: FSMContext):
    await cmd_achievements(message, state)

@router.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
async def handle_workout_history_menu(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_workout_menu_keyboard())
        return
    
    await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞:", reply_markup=get_workout_history_keyboard())

@router.message(F.text == "–ó–∞ –Ω–µ–¥–µ–ª—é")
async def handle_weekly_workout_history(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_workout_history_keyboard())
        db.close()
        return

    end_date = datetime.utcnow().date()
    start_date = end_date - timedelta(weeks=1)

    workouts = db.query(Workout).filter(
        Workout.user_id == user.id,
        func.date(Workout.date) >= start_date,
        func.date(Workout.date) <= end_date
    ).order_by(Workout.date.desc()).all()
    db.close()

    if workouts:
        history_text = f"<b>üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é ({start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}):</b>\n\n"
        for workout in workouts:
            history_text += f"‚Ä¢ {workout.name} ({workout.duration} –º–∏–Ω, {workout.calories_burned} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ) - {workout.date.strftime('%Y-%m-%d')}\n"
        await message.answer(history_text, parse_mode="HTML", reply_markup=get_workout_history_keyboard())
    else:
        await message.answer("üôÅ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_workout_history_keyboard())

@router.message(F.text == "–ó–∞ –º–µ—Å—è—Ü")
async def handle_monthly_workout_history(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_workout_history_keyboard())
        db.close()
        return

    end_date = datetime.utcnow().date()
    start_date = end_date - timedelta(days=30) # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—è—Ü

    workouts = db.query(Workout).filter(
        Workout.user_id == user.id,
        func.date(Workout.date) >= start_date,
        func.date(Workout.date) <= end_date
    ).order_by(Workout.date.desc()).all()
    db.close()

    if workouts:
        history_text = f"<b>üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü ({start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}):</b>\n\n"
        for workout in workouts:
            history_text += f"‚Ä¢ {workout.name} ({workout.duration} –º–∏–Ω, {workout.calories_burned} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ) - {workout.date.strftime('%Y-%m-%d')}\n"
        await message.answer(history_text, parse_mode="HTML", reply_markup=get_workout_history_keyboard())
    else:
        await message.answer("üôÅ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_workout_history_keyboard())

@router.message(Command("profile"))
async def cmd_profile(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

    if user:
        await message.answer(
            f"<b>üìù –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
            f"–†–æ—Å—Ç: {user.height} —Å–º\n"
            f"–í–µ—Å: {user.weight} –∫–≥\n"
            f"–¶–µ–ª—å: {user.goal}\n"
            f"–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {user.calorie_target if user.calorie_target else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'} –∫–∫–∞–ª\n"
            f"–û—á–∫–∏: {user.points or 0}\n"
            f"–°–µ—Ä–∏—è: {user.streak or 0} –¥–Ω–µ–π",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
    db.close()

@router.message(Command("food"))
async def cmd_food(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        return

    await message.answer("‚ùì –ß—Ç–æ —Ç—ã —Å—ä–µ–ª? (–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ø–±–ª–æ–∫–æ 200 –≥' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '–Ø–±–ª–æ–∫–æ')", reply_markup=get_food_menu_keyboard())
    await state.set_state(FoodStates.waiting_for_food_name)
    await add_state_to_history(state, FoodStates.waiting_for_food_name.state)

@router.message(FoodStates.waiting_for_food_name)
async def process_food_name(message: types.Message, state: FSMContext):
    food_input = message.text.strip()
    if not food_input:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.", reply_markup=get_food_menu_keyboard())
        return

    await state.update_data(raw_food_input=food_input)
    await message.answer(f"üîç –ò—â—É '{food_input}' –≤ –±–∞–∑–µ Open Food Facts...")

    open_food_facts_results = await search_open_food_facts(food_input)

    if open_food_facts_results:
        if len(open_food_facts_results) > 1:
            keyboard_builder = InlineKeyboardBuilder()
            for i, food in enumerate(open_food_facts_results[:5]):
                keyboard_builder.button(text=f"{food['food_name']} ({food['calories_per_100g']} –∫–∫–∞–ª/100–≥)", callback_data=f"select_off_food_{i}")
            keyboard_builder.adjust(1)
            keyboard_builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_food_menu")) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            await state.update_data(open_food_facts_options=open_food_facts_results)
            await message.answer("–Ø –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω:", reply_markup=keyboard_builder.as_markup())
            await state.set_state(FoodStates.waiting_for_food_selection)
            await add_state_to_history(state, FoodStates.waiting_for_food_selection.state)
        else:
            selected_food = open_food_facts_results[0]
            await state.update_data(selected_food=selected_food)
            await message.answer(f"–Ø –Ω–∞—à–µ–ª '{selected_food['food_name']}' ({selected_food['calories_per_100g']} –∫–∫–∞–ª/100–≥). –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ç—ã —Å—ä–µ–ª?", reply_markup=get_food_menu_keyboard())
            await state.set_state(FoodStates.waiting_for_calories_quantity)
            await add_state_to_history(state, FoodStates.waiting_for_calories_quantity.state)
    else:
        # –ï—Å–ª–∏ Open Food Facts API –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        food_name, quantity = parse_food_input(food_input)
        if food_name and quantity is not None:
            calories_per_100g = get_calories_per_100g(food_name)
            if calories_per_100g:
                total_calories = int((calories_per_100g / 100) * quantity)
                
                db_session = next(get_db())
                user_id = db_session.query(User).filter(User.telegram_id == message.from_user.id).first().id
                new_meal = Meal(
                    user_id=user_id,
                    name=f"{food_name} ({quantity} –≥)",
                    calories=total_calories
                )
                db_session.add(new_meal)
                db_session.commit()
                db_session.refresh(new_meal)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
                user_for_target_check = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
                if user_for_target_check and user_for_target_check.calorie_target:
                    today = datetime.utcnow().date()
                    total_calories_today = db_session.query(func.sum(Meal.calories)).filter(
                        Meal.user_id == user_id,
                        func.date(Meal.date) == today
                    ).scalar()
                    if total_calories_today is None: total_calories_today = 0

                    calorie_streak_changed = await update_calorie_streak(db_session, user_for_target_check, total_calories_today) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω—É—é —Å–µ—Ä–∏—é

                    if total_calories_today >= user_for_target_check.calorie_target:
                        message_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –≤ {user_for_target_check.calorie_target} –∫–∫–∞–ª!\n–í–∞—à–∞ —Å–µ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π: {user_for_target_check.calorie_streak} –¥–Ω–µ–π."
                        await message.answer(message_text, reply_markup=get_food_menu_keyboard())
                        if calorie_streak_changed:
                            await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º {user_for_target_check.calorie_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ({user_for_target_check.calorie_target} –∫–∫–∞–ª)!")
                    else:
                        await message.answer(f"–í—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏ {total_calories_today} –∏–∑ {user_for_target_check.calorie_target} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {user_for_target_check.calorie_target - total_calories_today} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())

                # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
                awarded, total_points, streak, streak_changed, _ = register_activity(db_session, message.from_user.id, 10, "meal_logged")
                if awarded > 0:
                    message_text = f"üåü +{awarded} –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–∏—Å—å –ø–∏—Ç–∞–Ω–∏—è. –°–µ—Ä–∏—è: {streak} –¥–Ω., –≤—Å–µ–≥–æ: {total_points} –æ—á–∫–æ–≤."
                    await message.answer(message_text)
                    if streak_changed:
                        await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!")

                db_session.close()

                await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_name} ({quantity} –≥) - {total_calories} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())
                await state.clear()
                await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
                return
            else:
                await message.answer(f"‚ùì –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è '{food_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–∞–ª–æ—Ä–∏–∏ –≤—Ä—É—á–Ω—É—é.", reply_markup=get_food_menu_keyboard())
                await state.update_data(food_name=food_name)
                await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–π –µ–¥–µ?", reply_markup=get_food_menu_keyboard())
                await state.set_state(FoodStates.waiting_for_calories)
                await add_state_to_history(state, FoodStates.waiting_for_calories.state)
                return
        elif food_name:
            calories_per_100g = get_calories_per_100g(food_name)
            if calories_per_100g:
                await state.update_data(food_name=food_name, calories_per_100g=calories_per_100g) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥
                await message.answer(f"–Ø –Ω–∞—à–µ–ª '{food_name}' ({calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100–≥). –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ç—ã —Å—ä–µ–ª?", reply_markup=get_food_menu_keyboard())
                await state.set_state(FoodStates.waiting_for_calories_quantity)
                await add_state_to_history(state, FoodStates.waiting_for_calories_quantity.state)
                return
            else:
                await message.answer(f"‚ùì –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è '{food_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–∞–ª–æ—Ä–∏–∏ –≤—Ä—É—á–Ω—É—é.", reply_markup=get_food_menu_keyboard())
                await state.update_data(food_name=food_name)
                await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–π –µ–¥–µ?", reply_markup=get_food_menu_keyboard())
                await state.set_state(FoodStates.waiting_for_calories)
                await add_state_to_history(state, FoodStates.waiting_for_calories.state)
                return

        await state.update_data(food_name=food_input)
        await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–π –µ–¥–µ?", reply_markup=get_food_menu_keyboard())
        await state.set_state(FoodStates.waiting_for_calories)
        await add_state_to_history(state, FoodStates.waiting_for_calories.state)

@router.callback_query(F.data.startswith("select_off_food_"), FoodStates.waiting_for_food_selection)
async def process_open_food_facts_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    selected_index = int(callback_query.data.split("_")[3])
    user_data = await state.get_data()
    open_food_facts_options = user_data.get('open_food_facts_options')

    if open_food_facts_options and 0 <= selected_index < len(open_food_facts_options):
        selected_food = open_food_facts_options[selected_index]
        await state.update_data(selected_food=selected_food)
        await callback_query.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω: '{selected_food['food_name']}' ({selected_food['calories_per_100g']} –∫–∫–∞–ª/100–≥). –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ç—ã —Å—ä–µ–ª?", reply_markup=None)
        await state.set_state(FoodStates.waiting_for_calories_quantity)
        await add_state_to_history(state, FoodStates.waiting_for_calories_quantity.state)
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=None)
        await state.clear()
        await clear_state_history(state)

@router.message(FoodStates.waiting_for_calories_quantity)
async def process_calories_quantity(message: types.Message, state: FSMContext, bot: Bot):
    db_session = next(get_db())
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
            return
        user_data = await state.get_data()
        selected_food = user_data.get('selected_food')

        if selected_food and selected_food.get('calories_per_100g') is not None:
            food_name = selected_food['food_name']
            calories_per_100g = selected_food['calories_per_100g']
            total_calories = int((calories_per_100g / 100) * quantity)
            
            user_id = db_session.query(User).filter(User.telegram_id == message.from_user.id).first().id
            new_meal = Meal(
                user_id=user_id,
                name=f"{food_name} ({quantity} –≥)",
                calories=total_calories
            )
            db_session.add(new_meal)
            db_session.commit()
            db_session.refresh(new_meal)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            user_for_target_check = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
            if user_for_target_check and user_for_target_check.calorie_target:
                today = datetime.utcnow().date()
                total_calories_today = db_session.query(func.sum(Meal.calories)).filter(
                    Meal.user_id == user_id,
                    func.date(Meal.date) == today
                ).scalar()
                if total_calories_today is None: total_calories_today = 0

                calorie_streak_changed = await update_calorie_streak(db_session, user_for_target_check, total_calories_today) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω—É—é —Å–µ—Ä–∏—é

                if total_calories_today >= user_for_target_check.calorie_target:
                    message_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –≤ {user_for_target_check.calorie_target} –∫–∫–∞–ª!\n–í–∞—à–∞ —Å–µ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π: {user_for_target_check.calorie_streak} –¥–Ω–µ–π."
                    await message.answer(message_text, reply_markup=get_food_menu_keyboard())
                    if calorie_streak_changed:
                        await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º {user_for_target_check.calorie_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ({user_for_target_check.calorie_target} –∫–∫–∞–ª)!")
                else:
                    await message.answer(f"–í—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏ {total_calories_today} –∏–∑ {user_for_target_check.calorie_target} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {user_for_target_check.calorie_target - total_calories_today} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())

            # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
            awarded, total_points, streak, streak_changed, _ = register_activity(db_session, message.from_user.id, 10, "meal_logged")
            if awarded > 0:
                message_text = f"üåü +{awarded} –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–∏—Å—å –ø–∏—Ç–∞–Ω–∏—è. –°–µ—Ä–∏—è: {streak} –¥–Ω., –≤—Å–µ–≥–æ: {total_points} –æ—á–∫–æ–≤."
                await message.answer(message_text)
                if streak_changed:
                    await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!")

            db_session.close()

            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_name} ({quantity} –≥) - {total_calories} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())
            await state.clear()
            await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
            return
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é, –µ—Å–ª–∏ selected_food –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∫–∞–ª–æ—Ä–∏–π
            food_name = user_data.get('food_name', user_data.get('raw_food_input', '–ø—Ä–æ–¥—É–∫—Ç'))
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è '{food_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–∞–ª–æ—Ä–∏–∏ –≤—Ä—É—á–Ω—É—é.", reply_markup=get_food_menu_keyboard())
            await state.update_data(food_name=food_name)
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —ç—Ç–æ–π –µ–¥–µ?", reply_markup=get_food_menu_keyboard())
            await state.set_state(FoodStates.waiting_for_calories)
            await add_state_to_history(state, FoodStates.waiting_for_calories.state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", reply_markup=get_food_menu_keyboard())
        db_session.close()
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π

@router.message(FoodStates.waiting_for_calories)
async def process_calories(message: types.Message, state: FSMContext, bot: Bot):
    db_session = next(get_db())
    try:
        calories = int(message.text)
        if calories <= 0:
            await message.answer("‚ö†Ô∏è –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
            return
        user_data = await state.get_data()
        user_id = db_session.query(User).filter(User.telegram_id == message.from_user.id).first().id

        new_meal = Meal(
            user_id=user_id,
            name=user_data['food_name'],
            calories=calories
        )

        db_session.add(new_meal)
        db_session.commit()
        db_session.refresh(new_meal)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
        user_for_target_check = db_session.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user_for_target_check and user_for_target_check.calorie_target:
            today = datetime.utcnow().date()
            total_calories_today = db_session.query(func.sum(Meal.calories)).filter(
                Meal.user_id == user_id,
                func.date(Meal.date) == today
            ).scalar()
            if total_calories_today is None: total_calories_today = 0

            calorie_streak_changed = await update_calorie_streak(db_session, user_for_target_check, total_calories_today) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω—É—é —Å–µ—Ä–∏—é

            if total_calories_today >= user_for_target_check.calorie_target:
                message_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏ –≤ {user_for_target_check.calorie_target} –∫–∫–∞–ª!\n–í–∞—à–∞ —Å–µ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π: {user_for_target_check.calorie_streak} –¥–Ω–µ–π."
                await message.answer(message_text, reply_markup=get_food_menu_keyboard())
                if calorie_streak_changed:
                    await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º {user_for_target_check.calorie_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ({user_for_target_check.calorie_target} –∫–∫–∞–ª)!")
            else:
                await message.answer(f"–í—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏ {total_calories_today} –∏–∑ {user_for_target_check.calorie_target} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {user_for_target_check.calorie_target - total_calories_today} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())

        # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ—á–∫–∏ –∑–∞ –∑–∞–ø–∏—Å—å –µ–¥—ã
        awarded, total_points, streak, streak_changed, _ = register_activity(db_session, message.from_user.id, 10, "meal_logged")
        if awarded > 0:
            message_text = f"üåü +{awarded} –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–∏—Å—å –ø–∏—Ç–∞–Ω–∏—è. –°–µ—Ä–∏—è: {streak} –¥–Ω., –≤—Å–µ–≥–æ: {total_points} –æ—á–∫–æ–≤."
            await message.answer(message_text)
            if streak_changed:
                await notify_friends_about_achievement(db_session, bot, user_for_target_check, f"–¥–æ—Å—Ç–∏–≥ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!")

        db_session.close()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {user_data['food_name']} - {calories} –∫–∫–∞–ª.", reply_markup=get_food_menu_keyboard())
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–∞–ª–æ—Ä–∏–∏ —á–∏—Å–ª–æ–º.", reply_markup=get_food_menu_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", reply_markup=get_food_menu_keyboard())
        db_session.close()
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π

@router.message(Command("today"))
async def cmd_today(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return

    today = datetime.utcnow().date()
    meals_today = db.query(Meal).filter(Meal.user_id == user.id, func.date(Meal.date) == today).all()
    total_calories = sum(meal.calories for meal in meals_today)

    calorie_target = user.calorie_target # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    response_text = f"üóìÔ∏è –°–µ–≥–æ–¥–Ω—è –í—ã –ø–æ—Ç—Ä–µ–±–∏–ª–∏: {total_calories} –∫–∫–∞–ª.\n"

    if calorie_target:
        percentage = (total_calories / calorie_target) * 100 if calorie_target > 0 else 0
        response_text += f"–í–∞—à–∞ —Ü–µ–ª—å: {calorie_target} –∫–∫–∞–ª.\n"
        response_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {percentage:.2f}% –æ—Ç –Ω–æ—Ä–º—ã.\n"
        response_text += f"–°–µ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π: {user.calorie_streak or 0} –¥–Ω–µ–π."
    else:
        response_text += "–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_calorie_target –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏."

    await message.answer(response_text, reply_markup=get_main_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_today
    db.close()

@router.message(Command("set_calorie_target"))
async def cmd_set_calorie_target(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        return

    await message.answer("üéØ –í–≤–µ–¥–∏ —Å–≤–æ—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000):", reply_markup=get_cancel_keyboard())
    await state.set_state(CalorieTargetStates.waiting_for_calorie_target)
    await add_state_to_history(state, CalorieTargetStates.waiting_for_calorie_target.state)

@router.message(CalorieTargetStates.waiting_for_calorie_target)
async def process_calorie_target(message: types.Message, state: FSMContext):
    db = next(get_db())
    try:
        calorie_target = int(message.text)
        if calorie_target <= 0:
            await message.answer("‚ö†Ô∏è –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_main_keyboard())
            return
        user_id = message.from_user.id
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.calorie_target = calorie_target
            db.commit()
            db.refresh(user)
            await message.answer(f"‚úÖ –¢–≤–æ—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {calorie_target} –∫–∫–∞–ª.", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.", reply_markup=get_main_keyboard())
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —á–∏—Å–ª–æ–º.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: {e}", reply_markup=get_main_keyboard())
    finally:
        db.close()
        await state.clear()
        await clear_state_history(state)

@router.message(Command("workout"))
async def cmd_workout(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        return

    await message.answer("üèãÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_workout_name)
    await add_state_to_history(state, WorkoutStates.waiting_for_workout_name.state)

@router.message(WorkoutStates.waiting_for_workout_name)
async def process_workout_name(message: types.Message, state: FSMContext):
    workout_name = message.text.strip()
    if not workout_name:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", reply_markup=get_workout_menu_keyboard())
        return
    await state.update_data(workout_name=workout_name)
    await message.answer("‚è±Ô∏è –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_duration)
    await add_state_to_history(state, WorkoutStates.waiting_for_duration.state)

@router.message(WorkoutStates.waiting_for_duration)
async def process_duration(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_workout_menu_keyboard())
            return
        await state.update_data(duration=duration)
        await message.answer("üî• –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Ç—ã —Å–∂–µ–≥ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? (–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)", reply_markup=get_workout_menu_keyboard())
        await state.set_state(WorkoutStates.waiting_for_calories_burned)
        await add_state_to_history(state, WorkoutStates.waiting_for_calories_burned.state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=get_workout_menu_keyboard())

@router.message(WorkoutStates.waiting_for_calories_burned)
async def process_calories_burned(message: types.Message, state: FSMContext, bot: Bot):
    try:
        calories_burned = int(message.text)
        if calories_burned < 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ 0.", reply_markup=get_workout_menu_keyboard())
            return
        await state.update_data(calories_burned=calories_burned)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–ö–∞—Ä–¥–∏–æ", callback_data="workout_type_–∫–∞—Ä–¥–∏–æ")],
                [types.InlineKeyboardButton(text="–°–∏–ª–æ–≤–∞—è", callback_data="workout_type_—Å–∏–ª–æ–≤–∞—è")],
                [types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="workout_type_–¥—Ä—É–≥–æ–µ")],
                [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="workout_type_–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_workout")] # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            ]
        )
        await message.answer("‚ùì –ö–∞–∫–æ–π –±—ã–ª —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? (–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞—Ä–¥–∏–æ', '–°–∏–ª–æ–≤–∞—è')", reply_markup=keyboard)
        await state.set_state(WorkoutStates.waiting_for_workout_type)
        await add_state_to_history(state, WorkoutStates.waiting_for_workout_type.state)

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π —á–∏—Å–ª–æ–º.", reply_markup=get_workout_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–ª–±—ç–∫–æ–≤ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.callback_query(F.data.startswith("workout_type_"), WorkoutStates.waiting_for_workout_type)
async def process_workout_type_callback(callback_query: types.CallbackQuery, state: FSMContext):
    workout_type = callback_query.data.split("_")[2] if "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" not in callback_query.data else None
    await state.update_data(workout_type=workout_type)
    
    await callback_query.message.answer("üí™ –ù–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ–≥–∏', '–ì—Ä—É–¥—å', '–í—Å–µ —Ç–µ–ª–æ'. –ò–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_muscle_group)
    await add_state_to_history(state, WorkoutStates.waiting_for_muscle_group.state)
    await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

@router.message(WorkoutStates.waiting_for_workout_type) # –ó–∞–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def process_workout_type_text_fallback(message: types.Message, state: FSMContext):
    workout_type = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(workout_type=workout_type)
    await message.answer("üí™ –ù–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ–≥–∏', '–ì—Ä—É–¥—å', '–í—Å–µ —Ç–µ–ª–æ'. –ò–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_muscle_group)
    await add_state_to_history(state, WorkoutStates.waiting_for_muscle_group.state)

@router.message(WorkoutStates.waiting_for_muscle_group)
async def process_muscle_group(message: types.Message, state: FSMContext):
    muscle_group = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(muscle_group=muscle_group)
    await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø–æ–¥—Ö–æ–¥–æ–≤? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_sets)
    await add_state_to_history(state, WorkoutStates.waiting_for_sets.state)

@router.message(WorkoutStates.waiting_for_sets)
async def process_sets(message: types.Message, state: FSMContext):
    try:
        sets = int(message.text) if message.text.strip() != '-' else None
        if sets is not None and sets <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ '-'.", reply_markup=get_workout_menu_keyboard())
            return
        await state.update_data(sets=sets)
        await message.answer("üîÑ –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π? (–ù–∞–ø—Ä–∏–º–µ—Ä: '3x10', '–¥–æ –æ—Ç–∫–∞–∑–∞'. –ò–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=get_workout_menu_keyboard())
        await state.set_state(WorkoutStates.waiting_for_reps)
        await add_state_to_history(state, WorkoutStates.waiting_for_reps.state)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —á–∏—Å–ª–æ–º –∏–ª–∏ '-'.", reply_markup=get_workout_menu_keyboard())

@router.message(WorkoutStates.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    reps = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(reps=reps)
    await message.answer("üèãÔ∏è –ö–∞–∫–æ–π –≤–µ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≥, –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=get_workout_menu_keyboard())
    await state.set_state(WorkoutStates.waiting_for_weight_used)
    await add_state_to_history(state, WorkoutStates.waiting_for_weight_used.state)

@router.message(WorkoutStates.waiting_for_weight_used)
async def process_weight_used(message: types.Message, state: FSMContext):
    db = next(get_db())
    try:
        weight_used = float(message.text) if message.text.strip() != '-' else None
        if weight_used is not None and weight_used <= 0:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏–ª–∏ '-'.", reply_markup=get_workout_menu_keyboard())
            return
        await state.update_data(weight_used=weight_used)

        user_data = await state.get_data()
        user_id = db.query(User).filter(User.telegram_id == message.from_user.id).first().id

        new_workout = Workout(
            user_id=user_id,
            name=user_data['workout_name'],
            duration=user_data['duration'],
            calories_burned=user_data['calories_burned'],
            workout_type=user_data.get('workout_type'),
            muscle_group=user_data.get('muscle_group'),
            sets=user_data.get('sets'),
            reps=user_data.get('reps'),
            weight_used=user_data.get('weight_used')
        )

        db.add(new_workout)
        db.commit()
        db.refresh(new_workout)
        # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ—á–∫–∏ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–±–æ–ª—å—à–µ, —á–µ–º –∑–∞ –µ–¥—É)
        awarded, total_points, streak, streak_changed, _ = register_activity(db, message.from_user.id, 20, "workout_logged")
        if awarded > 0:
            message_text = f"üåü +{awarded} –æ—á–∫–æ–≤ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–µ—Ä–∏—è: {streak} –¥–Ω., –≤—Å–µ–≥–æ: {total_points} –æ—á–∫–æ–≤."
            await message.answer(message_text)
            if streak_changed:
                user_for_notification = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                await notify_friends_about_achievement(db, bot, user_for_notification, f"–¥–æ—Å—Ç–∏–≥ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!")

        db.close()

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {user_data['workout_name']} - {user_data['calories_burned']} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.", reply_markup=get_workout_menu_keyboard())
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å —á–∏—Å–ª–æ–º –∏–ª–∏ '-'.", reply_markup=get_workout_menu_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", reply_markup=get_workout_menu_keyboard())
        db.close()
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π

@router.message(Command("weight"))
async def cmd_weight(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        return

    await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.", reply_markup=get_weight_menu_keyboard())
    await state.set_state(WeightStates.waiting_for_new_weight)
    await add_state_to_history(state, WeightStates.waiting_for_new_weight.state)

@router.message(WeightStates.waiting_for_new_weight)
async def process_new_weight(message: types.Message, state: FSMContext, bot: Bot):
    db = next(get_db())
    try:
        new_weight = float(message.text)
        if not (20 < new_weight < 300):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 20 –¥–æ 300).", reply_markup=get_weight_menu_keyboard())
            return
        user_id = db.query(User).filter(User.telegram_id == message.from_user.id).first().id

        new_weight_entry = Weight(
            user_id=user_id,
            weight=new_weight
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user.weight = new_weight
        
        db.add(new_weight_entry)
        db.commit()
        db.refresh(new_weight_entry)
        # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ—á–∫–∏ –∑–∞ –∑–∞–ø–∏—Å—å –≤–µ—Å–∞
        awarded, total_points, streak, streak_changed, _ = register_activity(db, message.from_user.id, 5, "weight_logged")
        if awarded > 0:
            message_text = f"üåü +{awarded} –æ—á–∫–æ–≤ –∑–∞ –∑–∞–ø–∏—Å—å –≤–µ—Å–∞. –°–µ—Ä–∏—è: {streak} –¥–Ω., –≤—Å–µ–≥–æ: {total_points} –æ—á–∫–æ–≤."
            await message.answer(message_text)
            if streak_changed:
                user_for_notification = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                await notify_friends_about_achievement(db, bot, user_for_notification, f"–¥–æ—Å—Ç–∏–≥ —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!")

        db.close()

        await message.answer(f"‚úÖ –¢–≤–æ–π –Ω–æ–≤—ã–π –≤–µ—Å ({new_weight} –∫–≥) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=get_weight_menu_keyboard())
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.", reply_markup=get_weight_menu_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", reply_markup=get_weight_menu_keyboard())
        db.close()
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π

@router.message(Command("progress"))
async def cmd_weight_chart(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return

    weights_data = db.query(Weight.date, Weight.weight).filter(Weight.user_id == user.id).order_by(Weight.date).all()
    db.close()

    if not weights_data:
        await message.answer("üôÅ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /weight, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–µ—Å.", reply_markup=get_weight_menu_keyboard())
        return

    chart_path = generate_weight_chart(weights_data, user.telegram_id)

    if chart_path:
        await message.answer_photo(FSInputFile(chart_path), caption="üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞:", reply_markup=get_weight_menu_keyboard())
        os.remove(chart_path) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞.", reply_markup=get_weight_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_weight_chart

@router.message(Command("remind"))
async def cmd_reminder(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    db.close()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        return

    await message.answer("üîî –ß—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?", reply_markup=get_cancel_keyboard())
    await state.set_state(ReminderStates.waiting_for_reminder_text)
    await add_state_to_history(state, ReminderStates.waiting_for_reminder_text.state)

@router.message(ReminderStates.waiting_for_reminder_text)
async def process_reminder_text(message: types.Message, state: FSMContext):
    reminder_text = message.text.strip()
    if not reminder_text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_main_keyboard())
        return
    await state.update_data(reminder_text=reminder_text)
    await message.answer("‚è∞ –ö–æ–≥–¥–∞ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-31 18:30)", reply_markup=get_cancel_keyboard())
    await state.set_state(ReminderStates.waiting_for_reminder_time)
    await add_state_to_history(state, ReminderStates.waiting_for_reminder_time.state)

async def send_reminder(bot, chat_id: int, text: str, reminder_id: int, scheduler):
    db = next(get_db())
    try:
        await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}", reply_markup=get_main_keyboard())
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        reminder_to_delete = db.query(Reminder).filter(Reminder.id == reminder_id).first()
        if reminder_to_delete:
            db.delete(reminder_to_delete)
            db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
    finally:
        db.close()

@router.message(ReminderStates.waiting_for_reminder_time)
async def process_reminder_time(message: types.Message, state: FSMContext, bot, scheduler: AsyncIOScheduler):
    db = next(get_db())
    try:
        reminder_time_str = message.text.strip()
        reminder_time = datetime.strptime(reminder_time_str, '%Y-%m-%d %H:%M')

        if reminder_time <= datetime.utcnow():
            await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.", reply_markup=get_main_keyboard())
            return

        user_data = await state.get_data()
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user_id_db = user.id

        new_reminder = Reminder(
            user_id=user_id_db,
            text=user_data['reminder_text'],
            time=reminder_time,
            job_id=None # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        )

        db.add(new_reminder)
        db.commit()
        db.refresh(new_reminder)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ APScheduler
        job_id = scheduler.add_job(
            send_reminder,
            'date',
            run_date=reminder_time,
            args=[bot, message.from_user.id, user_data['reminder_text'], new_reminder.id, scheduler],
            id=f"reminder_{new_reminder.id}"
        ).id

        new_reminder.job_id = job_id
        db.commit()
        db.close()

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{user_data['reminder_text']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%Y-%m-%d %H:%M')}.", reply_markup=get_main_keyboard())
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", reply_markup=get_main_keyboard())
        db.close()
        await state.clear()
        await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π

@router.message(Command("points"))
async def cmd_points(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return
    await message.answer(f"üåü –¢–≤–æ–∏ –æ—á–∫–∏: <b>{user.points or 0}</b>\n–¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.streak or 0}</b> –¥–Ω–µ–π", parse_mode="HTML", reply_markup=get_rating_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_points
    db.close()

@router.message(Command("achievements"))
async def cmd_achievements(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return

    today = datetime.utcnow().date()
    meals_count = db.query(func.count(Meal.id)).filter(Meal.user_id == user.id).scalar() or 0
    workouts_count = db.query(func.count(Workout.id)).filter(Workout.user_id == user.id).scalar() or 0
    weights_count = db.query(func.count(Weight.id)).filter(Weight.user_id == user.id).scalar() or 0

    # –ü—Ä–æ—Å—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = []
    if meals_count >= 1:
        achievements.append("–ü–µ—Ä–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω")
    if meals_count >= 50:
        achievements.append("50 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏")
    if workouts_count >= 1:
        achievements.append("–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    if workouts_count >= 20:
        achievements.append("20 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    if weights_count >= 5:
        achievements.append("5 –∑–∞–ø–∏—Å–µ–π –≤–µ—Å–∞")
    if (user.points or 0) >= 500:
        achievements.append("500 –æ—á–∫–æ–≤")
    if (user.streak or 0) >= 7:
        achievements.append("–°–µ—Ä–∏—è 7 –¥–Ω–µ–π")

    # –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏—é –∫–∞–ª–æ—Ä–∏–π
    if (user.calorie_streak or 0) >= 1:
        achievements.append("–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    if (user.calorie_streak or 0) >= 3:
        achievements.append("3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    if (user.calorie_streak or 0) >= 7:
        achievements.append("7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    if (user.calorie_streak or 0) >= 14:
        achievements.append("14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    if (user.calorie_streak or 0) >= 30:
        achievements.append("30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ü–µ–ª—å—é –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")

    if not achievements:
        achievements_text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π!"
    else:
        achievements_text = "\n".join([f"‚Ä¢ {a}" for a in achievements])

    text = (
        f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n"
        f"–û—á–∫–∏: <b>{user.points or 0}</b>\n–°–µ—Ä–∏—è: <b>{user.streak or 0}</b> –¥–Ω–µ–π\n\n"
        f"{achievements_text}"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_rating_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è cmd_achievements
    db.close()

@router.message(F.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
async def handle_exercise_library_menu(message: types.Message, state: FSMContext):
    db = next(get_db())
    body_parts_raw = db.query(Exercise.body_part_ru).distinct().all()
    db.close()

    if body_parts_raw:
        builder = InlineKeyboardBuilder()
        for part_tuple in body_parts_raw:
            part_name_ru = part_tuple[0]
            builder.button(text=part_name_ru, callback_data=f"select_body_part_{part_name_ru}")
        builder.adjust(2) # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        builder.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="back_to_workout_menu")) # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        await message.answer("üèãÔ∏è –í—ã–±–µ—Ä–∏ —á–∞—Å—Ç—å —Ç–µ–ª–∞:", reply_markup=builder.as_markup())
        await state.set_state(ExerciseLibraryStates.waiting_for_body_part_selection)
        await add_state_to_history(state, ExerciseLibraryStates.waiting_for_body_part_selection.state)
    else:
        await message.answer("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=get_workout_menu_keyboard())

@router.callback_query(F.data == "back_to_workout_menu")
async def handle_back_to_workout_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=None)
    await callback_query.message.answer("üí™ –ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", reply_markup=get_workout_menu_keyboard())
    await state.clear()
    await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await callback_query.answer()

@router.callback_query(F.data.startswith("select_body_part_"), ExerciseLibraryStates.waiting_for_body_part_selection)
async def handle_body_part_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    body_part_ru = callback_query.data.split("select_body_part_")[1]
    await state.update_data(selected_body_part_ru=body_part_ru, current_page=0)

    db = next(get_db())
    all_exercises = db.query(Exercise).filter(Exercise.body_part_ru == body_part_ru).order_by(Exercise.name_ru).all() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    db.close()

    if all_exercises:
        await state.update_data(all_exercises=[{"id": e.id, "name_ru": e.name_ru} for e in all_exercises]) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await send_paginated_exercises(callback_query.message, state) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.set_state(ExerciseLibraryStates.waiting_for_page_selection)
        await add_state_to_history(state, ExerciseLibraryStates.waiting_for_page_selection.state)
    else:
        await callback_query.message.edit_text(f"üôÅ –î–ª—è —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ \'{body_part_ru}\' —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=None)
        await handle_exercise_library_menu(callback_query.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞

@router.callback_query(F.data == "back_to_body_parts")
async def handle_back_to_body_parts_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.", reply_markup=None)
    await handle_exercise_library_menu(callback_query.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞
    await state.clear()
    await clear_state_history(state) # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await callback_query.answer()

EXERCISES_PER_PAGE = 10 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def send_paginated_exercises(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    all_exercises = user_data.get('all_exercises', [])
    current_page = user_data.get('current_page', 0)
    selected_body_part_ru = user_data.get('selected_body_part_ru', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    start_index = current_page * EXERCISES_PER_PAGE
    end_index = start_index + EXERCISES_PER_PAGE
    exercises_to_display = all_exercises[start_index:end_index]

    total_pages = (len(all_exercises) + EXERCISES_PER_PAGE - 1) // EXERCISES_PER_PAGE

    builder = InlineKeyboardBuilder()
    for exercise in exercises_to_display:
        builder.button(text=exercise['name_ru'], callback_data=f"select_exercise_{exercise['id']}")
    builder.adjust(1)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))
    if current_page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_page"))
    
    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —á–∞—Å—Ç—è–º —Ç–µ–ª–∞", callback_data="back_to_body_parts"))

    await message.edit_text( # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –≤–º–µ—Å—Ç–æ answer
        f"üìö –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è '{selected_body_part_ru}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}):", 
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "prev_page", ExerciseLibraryStates.waiting_for_page_selection)
async def handle_prev_page_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    user_data = await state.get_data()
    current_page = user_data.get('current_page', 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await send_paginated_exercises(callback_query.message, state) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    else:
        await callback_query.message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", reply_markup=callback_query.message.reply_markup)

@router.callback_query(F.data == "next_page", ExerciseLibraryStates.waiting_for_page_selection)
async def handle_next_page_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    user_data = await state.get_data()
    all_exercises = user_data.get('all_exercises', [])
    current_page = user_data.get('current_page', 0)
    total_pages = (len(all_exercises) + EXERCISES_PER_PAGE - 1) // EXERCISES_PER_PAGE
    if current_page < total_pages - 1:
        await state.update_data(current_page=current_page + 1)
        await send_paginated_exercises(callback_query.message, state) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    else:
        await callback_query.message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", reply_markup=callback_query.message.reply_markup)

@router.callback_query(F.data.startswith("select_exercise_"), ExerciseLibraryStates.waiting_for_page_selection)
async def handle_exercise_selection(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback_query.answer()
    exercise_db_id = int(callback_query.data.split("select_exercise_")[1])

    db = next(get_db())
    exercise = db.query(Exercise).filter(Exercise.id == exercise_db_id).first()
    db.close()

    if exercise:
        primary_muscles_list_ru = json.loads(exercise.primary_muscles_ru) if exercise.primary_muscles_ru else []
        
        caption = (
            f"<b>{exercise.name_ru}</b>\n\n"
            f"<b>–ß–∞—Å—Ç—å —Ç–µ–ª–∞:</b> {exercise.body_part_ru}\n"
            f"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—à—Ü—ã:</b> {', '.join(primary_muscles_list_ru)}\n"
            f"<b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {exercise.difficulty_ru}\n\n"
            f"{exercise.description_ru}"
        )

        media_group = []

        if exercise.start_image_path and os.path.exists(exercise.start_image_path):
            media_group.append(InputMediaPhoto(media=FSInputFile(exercise.start_image_path)))
        
        if exercise.end_image_path and os.path.exists(exercise.end_image_path):
            media_group.append(InputMediaPhoto(media=FSInputFile(exercise.end_image_path)))

        if media_group:
            await callback_query.message.answer_media_group(media=media_group)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback_query.message.answer(caption, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardBuilder().add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="back_to_exercises_menu")).as_markup())
        await add_state_to_history(state, ExerciseLibraryStates.waiting_for_exercise_selection.state) # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=None)
        await send_paginated_exercises(callback_query.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

@router.callback_query(F.data == "back_to_exercises_menu")
async def handle_back_to_exercises_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=None)
    await send_paginated_exercises(callback_query.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    await state.set_state(ExerciseLibraryStates.waiting_for_page_selection)
    await add_state_to_history(state, ExerciseLibraryStates.waiting_for_page_selection.state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()

# --- –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@router.message(Command("add_points"))
async def cmd_admin_add_points(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_main_keyboard())
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏: ", reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_user_id)
    await add_state_to_history(state, AdminStates.waiting_for_user_id.state)

@router.message(AdminStates.waiting_for_user_id)
async def process_admin_user_id(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_main_keyboard())
        return
    try:
        target_user_id = int(message.text)
        db = next(get_db())
        user = db.query(User).filter(User.telegram_id == target_user_id).first()
        db.close()

        if not user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state)
            return

        await state.update_data(target_user_id=target_user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ", reply_markup=get_cancel_keyboard())
        await state.set_state(AdminStates.waiting_for_points_amount)
        await add_state_to_history(state, AdminStates.waiting_for_points_amount.state)

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_cancel_keyboard())
        await state.clear()
        await clear_state_history(state)

@router.message(AdminStates.waiting_for_points_amount)
async def process_admin_points_amount(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", reply_markup=get_main_keyboard())
        return
    try:
        points_to_add = int(message.text)
        if points_to_add <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())
            return

        user_data = await state.get_data()
        target_user_id = user_data.get("target_user_id")
        
        if not target_user_id:
            await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state)
            return

        db = next(get_db())
        target_user = db.query(User).filter(User.telegram_id == target_user_id).first()

        if target_user:
            awarded, total_points, streak = register_activity(db, target_user_id, points_to_add, "admin_awarded")
            await message.answer(f"‚úÖ {points_to_add} –æ—á–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {total_points}.", reply_markup=get_main_keyboard())
            db.close()
            await state.clear()
            await clear_state_history(state)
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ –≤—Ä–µ–º—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤).", reply_markup=get_main_keyboard())
            db.close()
            await state.clear()
            await clear_state_history(state)

    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_cancel_keyboard())
        await state.clear()
        await clear_state_history(state)

@router.message(F.text == "–ù–∞–∑–∞–¥ –∫ —Ä–µ–π—Ç–∏–Ω–≥—É", LeaderboardStates.waiting_for_leaderboard_type)
async def handle_back_to_rating_menu(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞.", reply_markup=get_rating_menu_keyboard())
    await state.clear()
    await clear_state_history(state)

@router.message(F.text == "–¢–æ–ø –ø–æ –æ—á–∫–∞–º", LeaderboardStates.waiting_for_leaderboard_type)
async def cmd_leaderboard_points(message: types.Message, state: FSMContext):
    db = next(get_db())
    users_by_points = db.query(User).order_by(User.points.desc()).limit(10).all()
    db.close()

    if users_by_points:
        leaderboard_text = "üèÜ <b>–¢–æ–ø-10 –ø–æ –æ—á–∫–∞–º:</b>\n\n"
        for i, user in enumerate(users_by_points):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram, –µ—Å–ª–∏ first_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ
            user_name = user.first_name if user.first_name else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}"
            leaderboard_text += f"{i+1}. {user_name} - {user.points or 0} –æ—á–∫–æ–≤\n"
    else:
        leaderboard_text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º."

    await message.answer(leaderboard_text, parse_mode="HTML", reply_markup=get_leaderboard_keyboard())
    await add_state_to_history(state, LeaderboardStates.waiting_for_leaderboard_type.state)

@router.message(F.text == "–¢–æ–ø –ø–æ —Å–µ—Ä–∏—è–º", LeaderboardStates.waiting_for_leaderboard_type)
async def cmd_leaderboard_streak(message: types.Message, state: FSMContext):
    db = next(get_db())
    users_by_streak = db.query(User).order_by(User.streak.desc()).limit(10).all()
    db.close()

    if users_by_streak:
        leaderboard_text = "üî• <b>–¢–æ–ø-10 –ø–æ —Å–µ—Ä–∏—è–º:</b>\n\n"
        for i, user in enumerate(users_by_streak):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram, –µ—Å–ª–∏ first_name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ
            user_name = user.first_name if user.first_name else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}"
            leaderboard_text += f"{i+1}. {user_name} - {user.streak or 0} –¥–Ω–µ–π\n"
    else:
        leaderboard_text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Å–µ—Ä–∏—è–º."

    await message.answer(leaderboard_text, parse_mode="HTML", reply_markup=get_leaderboard_keyboard())
    await add_state_to_history(state, LeaderboardStates.waiting_for_leaderboard_type.state)

@router.message(F.text == "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –¥—Ä—É–∑–µ–π", FriendStates.waiting_for_friend_id) # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –¥—Ä—É–∑–µ–π"
@router.message(F.text == "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –¥—Ä—É–∑–µ–π", FriendStates.waiting_for_friend_request_action)
async def handle_back_to_friend_menu(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π.", reply_markup=get_friend_menu_keyboard())
    await state.clear()
    await clear_state_history(state)

@router.message(F.text == "–ú–æ–∏ –¥—Ä—É–∑—å—è")
async def handle_my_friends_button(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–∑–µ–π, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º, –ª–∏–±–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º, –∏ —Å—Ç–∞—Ç—É—Å 'accepted'
    friends_list = db.query(Friendship).filter(
        ((Friendship.requester_id == user.id) | (Friendship.addressee_id == user.id)),
        Friendship.status == "accepted"
    ).join(User, Friendship.requester_id == User.id).all() # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º User –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è first_name

    if friends_list:
        friends_text = "ü§ù <b>–¢–≤–æ–∏ –¥—Ä—É–∑—å—è:</b>\n\n"
        for friendship in friends_list:
            friend_user = None
            if friendship.requester_id == user.id: # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
                friend_user = friendship.addressee
            else: # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å
                friend_user = friendship.requester
            
            if friend_user:
                friend_name = friend_user.first_name if friend_user.first_name else (f"@{friend_user.username}" if friend_user.username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_user.telegram_id}")
                friends_text += f"‚Ä¢ {friend_name} (–û—á–∫–∏: {friend_user.points or 0}, –°–µ—Ä–∏—è: {friend_user.streak or 0} –¥–Ω–µ–π)\n"
    else:
        friends_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –û—Ç–ø—Ä–∞–≤—å –∫–æ–º—É-–Ω–∏–±—É–¥—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!"

    await message.answer(friends_text, parse_mode="HTML", reply_markup=get_friend_menu_keyboard())
    await add_state_to_history(state, UserStateHistory.history.state) # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –¥—Ä—É–∑–µ–π

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞")
async def handle_add_friend_button(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –¥—Ä—É–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456789' –∏–ª–∏ '@myfriend'): ", reply_markup=get_add_friend_keyboard())
    await state.set_state(FriendStates.waiting_for_friend_id)
    await add_state_to_history(state, FriendStates.waiting_for_friend_id.state)

@router.message(FriendStates.waiting_for_friend_id)
async def process_add_friend_id(message: types.Message, state: FSMContext, bot: Bot):
    db = next(get_db())
    try:
        identifier = message.text.strip()
        requester_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        addressee_user = None

        if not requester_user:
            await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
            await state.clear()
            await clear_state_history(state)
            return
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        try:
            target_telegram_id = int(identifier)
            addressee_user = db.query(User).filter(User.telegram_id == target_telegram_id).first()
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
            # –£–¥–∞–ª—è–µ–º '@' –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            username_to_search = identifier.lstrip('@')
            addressee_user = db.query(User).filter(User.username == username_to_search).first()

        if not addressee_user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –∏ –≤–≤–µ–ª —Å–≤–æ–π username, –µ—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –ø–æ –Ω–µ–º—É.", reply_markup=get_add_friend_keyboard())
            return

        if requester_user.id == addressee_user.id:
            await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —Å–∞–º–æ–º—É —Å–µ–±–µ.", reply_markup=get_add_friend_keyboard())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–∂–µ –¥—Ä—É–∑–µ–π
        existing_friendship = db.query(Friendship).filter(
            ((Friendship.requester_id == requester_user.id) & (Friendship.addressee_id == addressee_user.id)) |
            ((Friendship.requester_id == addressee_user.id) & (Friendship.addressee_id == requester_user.id))
        ).first()

        if existing_friendship:
            if existing_friendship.status == "pending":
                addressee_name = addressee_user.first_name if addressee_user.first_name else addressee_user.username
                await message.answer(f"–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –∫ {addressee_name} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_friend_menu_keyboard())
            elif existing_friendship.status == "accepted":
                addressee_name = addressee_user.first_name if addressee_user.first_name else addressee_user.username
                await message.answer(f"–í—ã —É–∂–µ –¥—Ä—É–∑—å—è —Å {addressee_name}.", reply_markup=get_friend_menu_keyboard())
            await state.clear()
            await clear_state_history(state)
            return

        new_friendship = Friendship(
            requester_id=requester_user.id,
            addressee_id=addressee_user.id,
            status="pending"
        )
        db.add(new_friendship)
        db.commit()
        db.refresh(new_friendship)

        addressee_name = addressee_user.first_name if addressee_user.first_name else addressee_user.username
        requester_name = requester_user.first_name if requester_user.first_name else requester_user.username
        await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {addressee_name}.", reply_markup=get_friend_menu_keyboard())
        # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await bot.send_message(addressee_user.telegram_id, f"üîî –£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç {requester_name}!", reply_markup=get_friend_menu_keyboard())

        await state.clear()
        await clear_state_history(state)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", reply_markup=get_add_friend_keyboard())
    finally:
        db.close()

@router.message(F.text == "–ó–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è")
async def handle_friend_requests_button(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()

    if not user:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())
        db.close()
        return

    pending_requests = db.query(Friendship).filter(
        Friendship.addressee_id == user.id,
        Friendship.status == "pending"
    ).join(User, Friendship.requester_id == User.id).all() # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º User –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è first_name

    if pending_requests:
        await message.answer("‚úâÔ∏è –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è:", reply_markup=get_friend_requests_keyboard(pending_requests))
        await state.set_state(FriendStates.waiting_for_friend_request_action)
        await add_state_to_history(state, FriendStates.waiting_for_friend_request_action.state)
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è.", reply_markup=get_friend_menu_keyboard())
    db.close()

@router.callback_query(F.data.startswith("accept_friend_"), FriendStates.waiting_for_friend_request_action)
async def handle_accept_friend_request(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    db = next(get_db())
    friendship_id = int(callback_query.data.split("_")[2])
    friendship = db.query(Friendship).filter(Friendship.id == friendship_id).first()

    if friendship and friendship.status == "pending":
        friendship.status = "accepted"
        db.commit()
        db.refresh(friendship)
        requester_name = friendship.requester.first_name if friendship.requester.first_name else friendship.requester.username
        addressee_name = friendship.addressee.first_name if friendship.addressee.first_name else friendship.addressee.username
        await callback_query.message.edit_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç {requester_name} –ø—Ä–∏–Ω—è—Ç!", reply_markup=None)
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π.", reply_markup=get_friend_menu_keyboard())
        await bot.send_message(friendship.requester.telegram_id, f"üéâ {addressee_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!")
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π.", reply_markup=get_friend_menu_keyboard())
    
    await state.clear()
    await clear_state_history(state)
    db.close()
    await callback_query.answer()

@router.callback_query(F.data.startswith("reject_friend_"), FriendStates.waiting_for_friend_request_action)
async def handle_reject_friend_request(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    db = next(get_db())
    friendship_id = int(callback_query.data.split("_")[2])
    friendship = db.query(Friendship).filter(Friendship.id == friendship_id).first()

    if friendship and friendship.status == "pending":
        friendship.status = "rejected"
        db.commit()
        db.refresh(friendship)
        requester_name = friendship.requester.first_name if friendship.requester.first_name else friendship.requester.username
        addressee_name = friendship.addressee.first_name if friendship.addressee.first_name else friendship.addressee.username
        await callback_query.message.edit_text(f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç {requester_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.", reply_markup=None)
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π.", reply_markup=get_friend_menu_keyboard())
        await bot.send_message(friendship.requester.telegram_id, f"üòî {addressee_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è.")
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await callback_query.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π.", reply_markup=get_friend_menu_keyboard())

    await state.clear()
    await clear_state_history(state)
    db.close()
    await callback_query.answer()
